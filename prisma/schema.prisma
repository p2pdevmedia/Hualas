generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                    @id @default(cuid())
  email               String                    @unique
  name                String?
  password            String
  role                Role                      @default(MEMBER)
  isActive            Boolean                   @default(true)
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  messages            Message[]
  conversations       ConversationParticipant[]
  passwordResetTokens PasswordResetToken[]
  formResponses       FormResponse[]
  activityParticipants ActivityParticipant[]
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Conversation {
  id           String                    @id @default(cuid())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  messages     Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id])
  body           String
  readAt         DateTime?
  createdAt      DateTime     @default(now())
}

model Form {
  id        String       @id @default(cuid())
  title     String
  fields    FormField[]
  responses FormResponse[]
  createdAt DateTime     @default(now())
}

model FormField {
  id      String @id @default(cuid())
  formId  String
  form    Form   @relation(fields: [formId], references: [id])
  label   String
  type    String
  options Json?
  required Boolean @default(false)
  order   Int
}

model FormResponse {
  id        String @id @default(cuid())
  formId    String
  form      Form   @relation(fields: [formId], references: [id])
  userId    String?
  user      User?  @relation(fields: [userId], references: [id])
  data      Json
  createdAt DateTime @default(now())
}

model Activity {
  id          String             @id @default(cuid())
  name        String
  date        DateTime
  frequency   ActivityFrequency @default(ONE_TIME)
  image       String?
  description String?
  price       Int                @default(0)
  participants ActivityParticipant[]
  createdAt   DateTime @default(now())
}

model ActivityParticipant {
  id      String @id @default(cuid())
  activityId String
  userId  String
  receipt String?
  receiptDate DateTime?
  activity   Activity @relation(fields: [activityId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@unique([activityId, userId])
}

model SiteSetting {
  id              Int    @id
  logo            String?
  favicon         String?
  navbarColor     String?
  footerColor     String?
  backgroundColor String?
}

enum Role {
  ADMIN
  MEMBER
  SUPER_ADMIN
}

enum ActivityFrequency {
  DAILY
  WEEKLY
  MONTHLY
  ONE_TIME
}
